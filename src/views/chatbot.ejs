<div id="chatbotContent">
    <div id="chatbox">
      <div id="messages" style="max-height: 400px; overflow-y: auto;"></div>
      <input id="messageInput" type="text" placeholder="Type something or click üìç Share Location..." />
      <button onclick="sendMessage()">Send</button>
      <button onclick="shareLocation()">üìç Share Location</button>
      <button onclick="restartChat()">üîÑ Restart</button>
    </div>
    <div id="joinModal" class="Student-join-modal-overlay" style="display: none;">
        <div class="Student-join-modal-content">
          <h3>Send Join Request</h3>
          <form id="joinForm">
            <input type="hidden" id="ownerPhone" />
      
            <div>
              <label>Your Name:
                <input type="text" id="studentName" required />
              </label>
            </div>
      
            <div>
              <label>Your Phone:
                <input type="text" id="studentPhone" required />
              </label>
            </div>
      
            <div>
              <label>University Destination:
                <input type="text" id="university" readonly />
              </label>
            </div>
      
            <div>
              <label>Home Address:
                <input type="text" id="address" required />
                <button type="button" onclick="shareHomeLocation()">üìç Share Location</button>
              </label>
            </div>
      
            <div>
              <label>Morning Time:
                <input type="time" id="morningTime" required />
              </label>
            </div>
      
            <div>
              <label>Return Time:
                <input type="time" id="returnTime" required />
              </label>
            </div>
      
            <div style="margin-top:10px;">
              <button type="submit">Send Request</button>
              <button type="button" onclick="closeModal()">Cancel</button>
            </div>
          </form>
        </div>
      </div>
      
  </div>

  

<script>
function openJoinModal(ownerName, ownerPhone) {
  const modal = document.getElementById('joinModal');
  modal.style.display = 'flex';
  document.getElementById('ownerPhone').value = ownerPhone;
  document.getElementById('studentName').value = currentUser.full_name;
  document.getElementById('studentPhone').value = currentUser.phone_number;
  document.getElementById('university').value = sessionState.destination || 'Not set';
}

async function shareHomeLocation() {
  if (!navigator.geolocation) {
    alert("Geolocation not supported.");
    return;
  }

  navigator.geolocation.getCurrentPosition(async (position) => {
    const { latitude, longitude } = position.coords;

    try {
      const res = await fetch(`/api/reverse-geocode?lat=${latitude}&lng=${longitude}`);
      const data = await res.json();
      document.getElementById('address').value = data.formatted || `${latitude}, ${longitude}`;
    } catch (err) {
      alert("Failed to retrieve address.");
      document.getElementById('address').value = `${latitude}, ${longitude}`;
    }
  });
}

document.getElementById('joinForm').addEventListener('submit', async function (e) {
  e.preventDefault();

  const requestData = {
    ownerPhone: document.getElementById('ownerPhone').value,
    studentName: document.getElementById('studentName').value,
    studentPhone: document.getElementById('studentPhone').value,
    university: document.getElementById('university').value,
    address: document.getElementById('address').value,
    morningTime: document.getElementById('morningTime').value,
    returnTime: document.getElementById('returnTime').value
  };

  const res = await fetch('/api/join-request', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(requestData)
  });

  const data = await res.json();
  addMessage('ClassRide', data.message || "‚úÖ Request sent!", 'bot');
  closeModal();
});

    const sessionId = 'user-session';
  
    // Injected from server (EJS): fallback to blank if not logged in
    const currentUser = {
      full_name: "<%= user?.full_name || '' %>",
      phone_number: "<%= user?.phone_number || '' %>"
    };
  
    async function restartChat() {
      addMessage('You', 'start over', 'user');
      const res = await fetch('/api/chatbot/message', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: 'start over', sessionId })
      });
      const data = await res.json();
      addMessage('ClassRide', data.reply, 'bot');
    }
  
    async function sendMessage() {
      const input = document.getElementById('messageInput');
      const msg = input.value;
      if (!msg.trim()) return;
  
      addMessage('You', msg, 'user');
  
      const res = await fetch('/api/chatbot/message', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: msg, sessionId })
      });
  
      const data = await res.json();
      addMessage('ClassRide', data.reply, 'bot', data.matchedOwners || []);
      input.value = '';
    }
  
    async function shareLocation() {
      if (!navigator.geolocation) {
        addMessage('ClassRide', "Geolocation is not supported by your browser.", 'bot');
        return;
      }
  
      navigator.geolocation.getCurrentPosition(async (position) => {
        const { latitude, longitude } = position.coords;
        addMessage('You', `My location is: ${latitude}, ${longitude}`, 'user');
  
        const res = await fetch('/api/chatbot/message', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ lat: latitude, lng: longitude, sessionId })
        });
  
        const data = await res.json();
        addMessage('ClassRide', data.reply, 'bot', data.matchedOwners || []);
      }, () => {
        addMessage('ClassRide', "Unable to retrieve your location.", 'bot');
      });
    }
  
    function addMessage(sender, text, type, owners = []) {
      const msgBox = document.getElementById('messages');
      const div = document.createElement('div');
      div.className = `msg ${type}`;
  
      if (owners.length > 0 && sender === 'ClassRide') {
        div.innerHTML = `<strong>${sender}:</strong><br>${text}<br><br>` +
          owners.map(o =>
            `<button onclick="openJoinModal('${o.full_name}', '${o.phone_number}')">Send Join Request to ${o.full_name}</button>`
          ).join('<br>');
      } else {
        div.innerHTML = `<strong>${sender}:</strong> ${text}`;
      }
  
      msgBox.appendChild(div);
      msgBox.scrollTop = msgBox.scrollHeight;
    }
    function openJoinModal(ownerName, ownerPhone) {
  const modal = document.getElementById('joinModal');
  modal.style.display = 'flex'; // ‚úÖ Only show it when this function runs
  document.getElementById('ownerPhone').value = ownerPhone;
  document.getElementById('studentName').value = currentUser.full_name;
  document.getElementById('studentPhone').value = currentUser.phone_number;
}

function closeModal() {
  const modal = document.getElementById('joinModal');
  modal.style.display = 'none';
}


  
    // Submit Join Request with all fields
    document.getElementById('joinForm').addEventListener('submit', async function (e) {
      e.preventDefault();
  
      const ownerPhone = document.getElementById('ownerPhone').value;
      const studentName = document.getElementById('studentName').value;
      const studentPhone = document.getElementById('studentPhone').value;
      const university = document.getElementById('university').value;
      const address = document.getElementById('address').value;
      const pickupPoint = document.getElementById('pickupPoint').value;
  
      const res = await fetch('/api/join-request', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ownerPhone,
          studentName,
          studentPhone,
          university,
          address,
          pickupPoint
        })
      });
  
      const data = await res.json();
      addMessage('ClassRide', data.message || "‚úÖ Request sent!", 'bot');
      closeModal();
    });
  
    // Initial greeting on modal open
    function startChat() {
      const msgBox = document.getElementById('messages');
      if (msgBox) msgBox.innerHTML = '';
      addMessage('ClassRide', "Hello! Are you a student or a driver?", 'bot');
    }
  </script>
  
  
  <style>
 .Student-join-modal-overlay {
  display: none; /* Keep hidden initially */
  position: fixed;
  top: 0; left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0,0,0,0.4);
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.Student-join-modal-content {
  background: #fff;
  padding: 20px;
  border-radius: 12px;
  max-width: 400px;
  width: 90%;
  max-height: 90vh;
  overflow-y: auto;
}


.Student-join-modal-content h3 {
  margin-bottom: 15px;
  text-align: center;
}

.Student-join-modal-content label {
  display: block;
  margin-bottom: 10px;
  font-weight: 500;
}

.Student-join-modal-content input,
.Student-join-modal-content select {
  width: 100%;
  padding: 8px;
  margin-top: 5px;
  margin-bottom: 15px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

.Student-join-modal-buttons {
  display: flex;
  justify-content: space-between;
  gap: 10px;
}

.Student-join-modal-buttons button {
  flex: 1;
  padding: 10px;
  background-color: #007BFF;
  color: white;
  border: none;
  border-radius: 5px;
}

.Student-join-modal-buttons button:hover {
  background-color: #0056b3;
}

    #chatbox {
      padding: 20px;
      border: 1px solid #ccc;
      border-radius: 8px;
      background: #fff;
      margin-top: 20px;
      max-width: 600px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
    }
  
    .msg {
      margin: 10px 0;
      line-height: 1.4;
    }
  
    .user {
      color: #333;
      font-weight: bold;
    }
  
    .bot {
      color: #007BFF;
    }
  
    input {
      width: 60%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
    }
  
    button {
      padding: 10px;
      margin-left: 10px;
      background: #007BFF;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
  
    button:hover {
      background-color: #0056b3;
    }
  
    #joinModal input {
      width: 100%;
      padding: 8px;
      margin-top: 5px;
      margin-bottom: 10px;
    }
  </style>
  